# -*- coding: utf-8 -*-
"""Лабораторная работа 9 "currencies-visualizing-script.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkl1Gr_yHhACiZwYvp3A5z9CNILoy6Ia
"""

import requests
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.dates as md
import numpy as np
from datetime import date, datetime
from matplotlib.colors import Normalize
from xml.etree import ElementTree as ET

def get_currencies(currencies_ids_list=None):
    res = requests.get("http://www.cbr.ru/scripts/XML_daily.asp")
    cur_res_str = res.text
    result = {}
    
    root = ET.fromstring(cur_res_str)
    valutes = root.findall("Valute")

    for v in valutes:
      valute_id = v.get('ID')
      if valute_id in currencies_ids_list:
        valute_name = v.find('Name').text
        valute_cur_val = v.find('Value').text
        # Добавлен параметр name для отображения названий
        result[valute_name] = valute_cur_val


    return result

def get_dynamics(currency_id):

    today = date.today()
    year = date(today.year-1, today.month, today.day) # получаем дату date для прошлого года
    today = today.strftime('%d/%m/%Y') # преобразуем даты так, чтобы был нужный формат для сервиса ЦБ
    year = year.strftime('%d/%m/%Y')

    query = {
        'date_req1': year,
        'date_req2': today,
        'VAL_NM_RQ': currency_id
    }

    res = requests.get("http://www.cbr.ru/scripts/XML_dynamic.asp", params=query)
    cur_res_str = res.text

    result = {}

    root = ET.fromstring(cur_res_str)

    records = root.findall("Record")

    # преобразуем данные в словарь по аналогии с get_currencies
    for r in records:
        record_date = r.get('Date')
        rate_value = r.find('Value').text
        result[record_date] = rate_value

    return result

currencies = ['R01820', 'R01815', 'R01810', 'R01775', 'R01770',
              'R01760', 'R01720', 'R01717', 'R01670', 'R01625']
cur_vals = get_currencies(currencies)
print(cur_vals)

ids = cur_vals.keys()
# заменяем запятые в числах на точки
values = [float(x.replace(',', '.')) for x in cur_vals.values()] 
# получаем числа с одинаковым интервалом (для оси X)
y_pos = np.arange(len(ids)) 
# цветовая схема
cmap = cm.get_cmap('twilight')
# нормализуем значения курсов (получаем значения от 0 до 1) - для выбора цвета
norm = Normalize(vmin=min(values), vmax=max(values))

for i in range(len(ids)):
    # добавляем столбец
    plt.bar(y_pos[i], values[i], color=cmap(norm(values))[i])
plt.xlabel('Валюта')
plt.ylabel('Курс')
plt.title('Курсы валют')
# легенда графика, loc, bbox_to_anchor - положение легенды
plt.legend(ids, loc=2, bbox_to_anchor=(1, 1)) 
plt.show()

# график динамики курса выбранной валюты

cur_rates = get_dynamics('R01235') 
print(cur_rates)
cur_rates_dates = [datetime.strptime(x, '%d.%m.%Y') for x in cur_rates.keys()] 
cur_rates_values = [float(x.replace(',', '.')) for x in cur_rates.values()]

plt.plot(cur_rates_dates, cur_rates_values)
plt.xlabel('Дата')
plt.ylabel('Курс')
plt.title('Динамика курса доллара')
plt.show() 

fig, axs = plt.subplots(2)
for i in range(len(ids)):
    axs[0].bar(y_pos[i], values[i], color=cmap(norm(values))[i])
axs[0].legend(ids, loc=2, bbox_to_anchor=(1.02, 1.03))
axs[1].plot(cur_rates_dates, cur_rates_values)
plt.show()