# -*- coding: utf-8 -*-
"""Шумякин И.С. 3ИВТ(2)-19, Лабораторная работа 5.

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11zL4aesp1tc0a4J8T4Cj31lvWmeyBraF

# Лабораторная работа 5. Визуализация данных о погоде с помощью matplotlib.

---



Цель работы: научиться обрабатывать и визуализировать данные, полученные с помощью API (на примере сервиса openweathermap).

Описание работы: получить данные о погоде за 5 последний дней и визуализировать эти данные, используя диаграмму рассеяния (scatterplot). Затем, посчитать среднюю температуру за каждый день и построить рядом (на этом же изображении) линейную диаграмму изменения температур.

Часть 1. Получение данных в формате JSON через OpenWeatherMap API
"""

api_key = 'c7c7af0deb88f7b76560d4697cb6c86f'

def getweather(api_key=None):
    import time
    import json
    import requests
    city, lat, lon = 'Saint Petersburg, RU', 59.57, 30.19

    result = dict() # создаём словарь
    result['city'] = city # добавляем ключ, значение которого - город, погоду в котором мы получаем
    result['temps'] = [] # добавляем ключ и создаём пустой список, в который будем добавлять значения температуры по часам (dt и temp)

    for i in range(5, 0, -1):    
        dt = int(time.time()) - 86400*i # получаем текущее время в unix timestamp и вычитаем количество секунд в 5 днях, 4 днях, 3 днях и т.д.
        # т.к. API OpenWeatherMap возвращает погоду только на один день
        # соответственно, необходимо выполнить 5 запросов, чтобы получить данные за 5 дней

        res = requests.get(
            f'http://api.openweathermap.org/data/2.5/'
            f'onecall/timemachine?lat={lat}&lon={lon}&dt={dt}'
            f'&appid={api_key}&lang=ru&units=metric') # выполняем запрос
        
        data = res.json() # получаем JSON
        print(data)
        measures = [{'dt': measure['dt'], 'temp': measure['temp']} for measure in data['hourly']]
        # преобразуем полученный объект в список из словарей
        # с ключами dt (метка времени) и temp (температура в это время)
        
        result['temps'].extend(measures) # добавляем в общий список данные о температуре за день
    
    return json.dumps(result) # возвращаем данные - JSON, преобразованный в строку


weather_data = getweather(api_key) # полученные данные записываем в переменную (из неё берутся значения для построения графика)

"""Часть 2. Визуализация полученных данных с помощью matplotlib и типа диаграммы scatterplot"""

import matplotlib.pyplot as plt
import matplotlib.dates as md
import pandas
from datetime import datetime

def visualise_data(json_data):
    # Считываем данные как JSON
    data = pandas.read_json(json_data) 

    # считываем название города
    city_name = data['city'][0]


    # проходим по словарю с данными, получаем значение ключа temps,
    # берём метку времени и преобразуем unix timestamp в объект даты
    dates = [datetime.fromtimestamp(d['dt']) for d in data['temps']]
    # проходим по словарю с данными, получаем значение ключа temps, берём значение температуры
    temps = [t['temp'] for t in data['temps']] 

    # создаём список, в котором будут значения даты (значения по оси X) для средних температур за день
    dates_avg = []
    # создаём список, в котором будет значения средней температуры за день (значения по оси Y)
    temps_avg = []

    # в списке 120 значений - 24 значения температуры за день
    for i in range(5):
      # Добавлено смещение на 12 часов
        dt = dates[i*24+12] 
        dates_avg.append(dt) # добавляем в список значений X
    for i in range(5):
        t = temps[i*24:i*24+24] # получаем все значения температуры за день: 0-23, 24-48 и т.д. (1 день - 24 значения)
        average_temp = sum(t) / len(t) # вычисляем среднее значение температуры за день
        temps_avg.append(average_temp) # добавляем в список значений Y

    ax = plt.gca()
    xfmt = md.DateFormatter('%d-%m') 
    ax.xaxis.set_major_formatter(xfmt)
    
    # заголовок
    plt.title(city_name)
    
    # точечный график
    plt.scatter(dates, temps)
    # график средних значений температуры 
    plt.plot(dates_avg, temps_avg, color='green')

    plt.show() 

visualise_data(weather_data)